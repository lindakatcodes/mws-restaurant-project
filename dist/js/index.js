const dbPromise=idb.open("restaurantReviewSite",6,function(e){switch(e.oldVersion){case 0:case 1:e.createObjectStore("storeInfo",{keypath:"id"});case 2:e.createObjectStore("reviews",{keypath:"id"});case 3:e.transaction.objectStore("reviews").createIndex("rest_ID","restaurant_id");case 4:e.createObjectStore("tempStorage",{keypath:"id",autoIncrement:!0});case 5:e.transaction.objectStore("tempStorage").createIndex("rest_id","restaurant_id"),e.createObjectStore("tempReviews",{keypath:"id"}),e.transaction.objectStore("tempReviews").createIndex("rest_id","restaurant_id")}});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static fetchRestaurants(e){fetch(`${DBHelper.DATABASE_URL}restaurants`).then(e=>e.json()).then(function(t){if(t){const a=t;a.forEach(e=>{dbPromise.then(async t=>{const a=t.transaction("storeInfo","readwrite").objectStore("storeInfo");await a.get(e.id)||(console.log("store is not in db, adding now"),a.add(e,e.id))})}),e(null,a)}else{const a=`Request failed: ${t.status} - ${t.statusText}`;e(a,null)}}).catch(function(){console.log("Sorry, your internet doesn't seem to be working. Pulling cached data for you now!"),dbPromise.then(function(e){return e.transaction("storeInfo","readwrite").objectStore("storeInfo").getAll()}).then(function(t){e(null,t)})})}static fetchReviewsById(e,t){console.log("inside fetchReviewsById");const a=`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`;fetch(a).then(e=>e.json()).then(function(e){if(e){console.log("fetch worked - dealing with response now");const a=e;a.forEach(e=>{dbPromise.then(async t=>{const a=t.transaction("reviews","readwrite").objectStore("reviews");await a.get(e.id)||(console.log("new review found! adding to cache"),a.add(e,e.id))})}),t(null,a)}else{console.log("fetch worked, but there was not any data");const a=`Request failed: ${e.status} - ${e.statusText}`;t(a,null)}}).then(()=>{}).catch(function(){console.log("inside the catch function of fetchReviewsById"),dbPromise.then(function(t){return t.transaction("reviews","readwrite").objectStore("reviews").index("rest_ID").getAll(parseInt(e,10))}).then(function(e){t(null,e)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.find(t=>t.id==e);a?t(null,a):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.filter(t=>t.cuisine_type==e);t(null,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((a,n)=>{if(a)t(a,null);else{const a=n.filter(t=>t.neighborhood==e);t(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a){DBHelper.fetchRestaurants((n,s)=>{if(n)a(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),a(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].neighborhood),n=t.filter((e,a)=>t.indexOf(e)==a);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].cuisine_type),n=t.filter((e,a)=>t.indexOf(e)==a);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`./img/optimized/${e.photograph}-optimized.jpg`}static mapMarkerForRestaurant(e,t){const a=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return a.addTo(newMap),a}static favStatus(e,t){fetch(`http://localhost:1337/restaurants/${t}/?is_favorite=${e}`,{method:"PUT"}).then(()=>{dbPromise.then(async a=>{const n=a.transaction("storeInfo","readwrite"),s=n.objectStore("storeInfo"),r=await s.get(t);return r.is_favorite=e,s.put(r,t),console.log("favorite status is marked!"),n.complete})}).catch(()=>{dbPromise.then(a=>{const n=a.transaction("tempStorage","readwrite"),s=n.objectStore("tempStorage"),r={restaurant_id:t,is_favorite:e,type:"favorite"};s.add(r);return n.complete})})}static toggleFav(e,t){const a=e.querySelector(".on"),n=e.querySelector(".off");a.classList.contains("hide")?(DBHelper.favStatus("true",t),a.classList.toggle("hide"),n.classList.toggle("hide")):n.classList.contains("hide")&&(DBHelper.favStatus("false",t),a.classList.toggle("hide"),n.classList.toggle("hide"))}static stashReview(e,t){"online"===e&&dbPromise.then(e=>{const a=e.transaction("reviews","readwrite");a.objectStore("reviews").add(t,t.id);return a.complete}),"offline"===e&&dbPromise.then(e=>{const a=e.transaction("tempReviews","readwrite"),n=a.objectStore("tempReviews");t.type="review";n.add(t);return a.complete})}static updateServer(){dbPromise.then(function(e){return e.transaction("tempStorage","readwrite").objectStore("tempStorage").openCursor()}).then(function e(t){if(t)return"favorite"===t.value.type&&(fetch(`http://localhost:1337/restaurants/${t.value.restaurant_id}/?is_favorite=${t.value.is_favorite}`,{method:"PUT"}),dbPromise.then(async e=>{const a=e.transaction("storeInfo","readwrite").objectStore("storeInfo"),n=await a.get(t.value.restaurant_id);n.is_favorite=t.value.is_favorite,a.put(n,t.value.restaurant_id)})),t.delete(),t.continue().then(e)}),dbPromise.then(function(e){return e.transaction("tempReviews","readwrite").objectStore("tempReviews").openCursor()}).then(function(e){if(e&&"review"===e.value.type){const t={restaurant_id:e.value.restaurant_id,name:e.value.name,rating:parseInt(e.value.rating,10),comments:e.value.comments};fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(t)}),dbPromise.then(async e=>{const a=e.transaction("reviews","readwrite").objectStore("reviews");console.log("adding an offline stashed review to the db"),a.add(t)})}})}}let restaurants,neighborhoods,cuisines;var newMap,markers=[];document.addEventListener("DOMContentLoaded",e=>{navigator.onLine&&DBHelper.updateServer(),initMap(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),a=e.selectedIndex,n=t.selectedIndex,s=e[a].value,r=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,r,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e)),addMarkersToMap()})}),createRestaurantHTML=(e=>{const t=document.createElement("li"),a=document.createElement("img");a.className="restaurant-img",a.src=DBHelper.imageUrlForRestaurant(e),a.alt=`A photo showcasing the atmosphere of ${e.name}`,t.append(a);const n=document.createElement("button");n.className="favButton",n.setAttribute("aria-label","Toggle this restaurant's favorite status");const s=document.createElement("img");s.src="./img/icons/fav_on.svg",s.className="favorite on",s.alt="Favorite restaurant toggle turned on";const r=document.createElement("img");r.src="./img/icons/fav_off.svg",r.className="favorite off",r.alt="Favorite restaurant toggle turned off","true"==e.is_favorite&&r.classList.add("hide"),"false"==e.is_favorite&&s.classList.add("hide"),n.append(r,s),t.append(n);const o=t.querySelector(".favButton");o.addEventListener("click",function(t){t.preventDefault(),DBHelper.toggleFav(o,e.id)});const i=document.createElement("h3");i.innerHTML=e.name,t.append(i);const c=document.createElement("p");c.innerHTML=e.neighborhood,t.append(c);const l=document.createElement("p");l.innerHTML=e.address,t.append(l);const d=document.createElement("a");return d.innerHTML="View Details",d.setAttribute("aria-label",`View details for ${e.name}`),d.href=DBHelper.urlForRestaurant(e),t.append(d),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})});
//# sourceMappingURL=index.js.map

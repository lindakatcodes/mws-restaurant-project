{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","keypath","transaction","objectStore","createIndex","autoIncrement","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","store","db","hasOwnProperty","offlineUpdate","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","reviews","review","index","parseInt","stashedReviews","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","method","tx","currStore","is_favorite","put","complete","button","on","querySelector","off","classList","contains","favStatus","toggle","openCursor","cycleItems","value","continue","cursor","restaurant_id","rating","comments","body","JSON","stringify","document","addEventListener","event","navigator","onLine","updateServer","initMap","fetchRestaurantFromURL","self","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","fetchReviewsById","fillReviewsHTML","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","setAttribute","favOn","createElement","favOff","favButton","append","e","preventDefault","toggleFav","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","day","appendChild","time","container","Object","keys","length","noReviews","ul","createReviewHTML","formHolder","formFunction","li","rest_id","reviewContainer","formTitle","reviewForm","nameDiv","nameLabel","htmlFor","nameInput","type","rateDiv","rateLabel","rateInput","commentDiv","commentLabel","commentInput","placeholder","reviewSubmit","newReview","formDiv","data","user_name","user_rating","user_review","res","stashReview","updateFormDiv","window","location","href","breadcrumb","replace","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n// First - open our db, or initialize if it's the first time\r\nconst dbPromise = idb.open('restaurantReviewSite', 6, function (upgradeDb) {\r\n  switch (upgradeDb.oldVersion) {\r\n    case 0:\r\n    case 1:\r\n      upgradeDb.createObjectStore('storeInfo', {\r\n        keypath: 'id'\r\n      })\r\n    case 2:\r\n      upgradeDb.createObjectStore('reviews', {\r\n        keypath: 'id'\r\n      })\r\n    case 3:\r\n      var newIndex = upgradeDb.transaction.objectStore('reviews');\r\n      newIndex.createIndex('rest_ID', 'restaurant_id');\r\n    case 4:\r\n      upgradeDb.createObjectStore('tempStorage', {\r\n        keypath: 'id',\r\n        autoIncrement: true\r\n      })\r\n    case 5:\r\n      var restIndex = upgradeDb.transaction.objectStore('tempStorage');\r\n      restIndex.createIndex('rest_id', 'restaurant_id');\r\n\r\n      upgradeDb.createObjectStore('tempReviews', {\r\n        keypath: 'id'\r\n      })\r\n\r\n      var revIndex = upgradeDb.transaction.objectStore('tempReviews');\r\n      revIndex.createIndex('rest_id', 'restaurant_id');\r\n  };\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n          const restaurants = response;\r\n          restaurants.forEach(restaurant => {\r\n            dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n              const tx = db.transaction('storeInfo', 'readwrite');\r\n              const store = tx.objectStore('storeInfo');\r\n\r\n              if (!restaurant.hasOwnProperty('offlineUpdate')) {\r\n                restaurant.offlineUpdate = false;\r\n              }\r\n\r\n              // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n              const request = await store.get(restaurant.id);\r\n              if (!request) {\r\n                console.log('store is not in db, adding now');\r\n                store.add(restaurant, restaurant.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, restaurants);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n          return store.getAll();\r\n        })\r\n          .then(function (response) {\r\n            const restaurants = response;\r\n            callback(null, restaurants);\r\n          })\r\n      });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    console.log('inside fetchReviewsById');\r\n\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`;\r\n    fetch(reviewURL)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) {\r\n          console.log('fetch worked - dealing with response now');\r\n          const reviews = response;\r\n          reviews.forEach(review => {\r\n            dbPromise.then(async db => {\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n\r\n              if (!review.hasOwnProperty('offlineUpdate')) {\r\n                review.offlineUpdate = false;\r\n              }\r\n\r\n              const request = await store.get(review.id);\r\n              if (!request) {\r\n                console.log('new review found! adding to cache');\r\n                store.add(review, review.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, reviews);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          console.log('fetch worked, but there was not any data');\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`inside the catch function of fetchReviewsById`);\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('reviews', 'readwrite');\r\n          const store = tx.objectStore('reviews');\r\n          const restIdIndex = store.index('rest_ID');\r\n          const temp = restIdIndex.getAll(parseInt(id, 10));\r\n          return temp;\r\n        })\r\n          .then(function (stashedReviews) {\r\n            const reviews = stashedReviews;\r\n            callback(null, reviews);\r\n          })\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  // Toggle favorite status\r\n  static favStatus(status, id) {\r\n    fetch(`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`, {\r\n      method: 'PUT'\r\n    })\r\n      .then(() => {\r\n        dbPromise.then(async db => {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n\r\n          const req = await store.get(id);\r\n          const currStore = req;\r\n          currStore.is_favorite = status;\r\n\r\n          store.put(currStore, id);\r\n          console.log('favorite status is marked!');\r\n          return tx.complete;\r\n        })\r\n      })\r\n      .catch(() => {\r\n        dbPromise.then(async db => {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n\r\n          const req = await store.get(id);\r\n          const currStore = req;\r\n          currStore.is_favorite = status;\r\n          currStore.offlineUpdate = true;\r\n\r\n          store.put(currStore, id);\r\n          console.log('favorite status is marked! will be updated on server when reconnected.');\r\n          return tx.complete;\r\n        })\r\n      })\r\n  }\r\n\r\n  static toggleFav(button, id) {\r\n    // function to toggle favorite button\r\n    const on = button.querySelector('.on');\r\n    const off = button.querySelector('.off');\r\n\r\n    if (on.classList.contains('hide')) {\r\n      DBHelper.favStatus('true', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    } else if (off.classList.contains('hide')) {\r\n      DBHelper.favStatus('false', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    }\r\n  }\r\n\r\n  static stashReview(status, review) {\r\n    // if user is online, add review to main db\r\n    if (status === 'online') {\r\n      dbPromise.then(db => {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        const addReviewToMain = store.add(review, review.id);\r\n        return tx.complete;\r\n      });\r\n    }\r\n    // if user is offline, add review to temp db\r\n    if (status === 'offline') {\r\n      dbPromise.then(db => {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        review.offlineUpdate = true;\r\n        const addReviewToTemp = store.add(review, review.id);\r\n        return tx.complete;\r\n      });\r\n    }\r\n  }\r\n\r\n  static updateServer() {\r\n\r\n    //first check storeInfo for favorite updates\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleItems(restaurant) {\r\n        if (!restaurant) return;\r\n\r\n        if (restaurant.value.offlineUpdate) {\r\n          restaurant.value.offlineUpdate = false;\r\n          fetch(`http://localhost:1337/restaurants/${restaurant.value.id}/?is_favorite=${restaurant.value.is_favorite}`, {\r\n            method: 'PUT'\r\n          })\r\n        }\r\n        return restaurant.continue().then(cycleItems);\r\n      })\r\n\r\n    // then check reviews for new ones\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('reviews', 'readwrite');\r\n      const store = tx.objectStore('reviews');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleReviews(cursor) {\r\n        if (!cursor) return;\r\n\r\n        if (cursor.value.offlineUpdate) {\r\n          // add new reviews\r\n          // set up review as requested in server options - will remove type key\r\n          const review = {\r\n            \"restaurant_id\": cursor.value.restaurant_id,\r\n            \"name\": cursor.value.name,\r\n            \"rating\": parseInt(cursor.value.rating, 10),\r\n            \"comments\": cursor.value.comments,\r\n            \"offlineUpdate\": false\r\n          }\r\n          // post to server and add to reviews db\r\n          fetch('http://localhost:1337/reviews/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(review)\r\n          })\r\n        }\r\n      })\r\n\r\n    /*\r\n    // check if tempStorage has any items - these will be favorite updates\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('tempStorage', 'readwrite');\r\n      const store = tx.objectStore('tempStorage');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleItems(cursor) {\r\n        if (!cursor) return;\r\n\r\n        if (cursor.value.type === 'favorite') {\r\n          // favorite update \r\n          // update server with new status\r\n          fetch(`http://localhost:1337/restaurants/${cursor.value.restaurant_id}/?is_favorite=${cursor.value.is_favorite}`, {\r\n            method: 'PUT'\r\n          })\r\n          // then update storeInfo db with status\r\n          dbPromise.then(async db => {\r\n            const tx = db.transaction('storeInfo', 'readwrite');\r\n            const store = tx.objectStore('storeInfo');\r\n\r\n            const req = await store.get(cursor.value.restaurant_id);\r\n            const currStore = req;\r\n            currStore.is_favorite = cursor.value.is_favorite;\r\n            store.put(currStore, cursor.value.restaurant_id);\r\n          })\r\n        }\r\n\r\n        cursor.delete();\r\n        return cursor.continue().then(cycleItems);\r\n      })\r\n\r\n    // now check tempReviews - this will have offline reviews saved\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('tempReviews', 'readwrite');\r\n      const store = tx.objectStore('tempReviews');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleReviews(cursor) {\r\n        if (!cursor) return;\r\n\r\n        if (cursor.value.type === 'review') {\r\n          // add new reviews\r\n          // set up review as requested in server options - will remove type key\r\n          const review = {\r\n            \"restaurant_id\": cursor.value.restaurant_id,\r\n            \"name\": cursor.value.name,\r\n            \"rating\": parseInt(cursor.value.rating, 10),\r\n            \"comments\": cursor.value.comments\r\n          }\r\n          // post to server and add to reviews db\r\n          fetch('http://localhost:1337/reviews/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(review)\r\n          })\r\n          dbPromise.then(async db => {\r\n            const tx = db.transaction('reviews', 'readwrite');\r\n            const store = tx.objectStore('reviews');\r\n            console.log('adding an offline stashed review to the db');\r\n            store.add(review);\r\n          });\r\n        }\r\n      })\r\n      */\r\n  }\r\n\r\n} //end of class\r\n","let restaurant;\r\nlet reviews;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  if (navigator.onLine) {\r\n    DBHelper.updateServer();\r\n  }\r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n    DBHelper.fetchReviewsById(id, (error, reviews) => {\r\n      self.reviews = reviews;\r\n      if (!reviews) {\r\n        console.error(error);\r\n        console.log('no reviews found from fetch')\r\n        return;\r\n      }\r\n      fillReviewsHTML(reviews);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n  cuisine.setAttribute('aria-label', `${restaurant.cuisine_type} restaurant`);\r\n\r\n  const favOn = document.createElement('img'); \r\n  favOn.src = `./img/icons/fav_on.svg`;\r\n  favOn.className = 'favorite on';\r\n  favOn.alt = 'Favorite restaurant toggle turned on';\r\n  const favOff = document.createElement('img');\r\n  favOff.src = `./img/icons/fav_off.svg`;\r\n  favOff.className = 'favorite off';\r\n  favOff.alt = 'Favorite restaurant toggle turned off';\r\n   if (restaurant.is_favorite == 'false') {\r\n    favOn.classList.add('hide');\r\n  } else if (restaurant.is_favorite == 'true') {\r\n    favOff.classList.add('hide');\r\n  }\r\n  const favButton = document.getElementById('fav');\r\n  favButton.setAttribute('aria-label', `Toggle this restaurant's favorite status`);\r\n  favButton.append(favOn, favOff);\r\n  \r\n  favButton.addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    DBHelper.toggleFav(favButton, restaurant.id);\r\n  })\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.reviews) => {\r\n  console.log('inside fillReviewsHTML function');\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n  container.setAttribute('aria-label', 'Reviews');\r\n\r\n  if (!reviews || Object.keys(reviews).length == 0) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n\r\n  const formHolder = formFunction(reviews[0].restaurant_id);\r\n  container.appendChild(formHolder);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\nformFunction = (rest_id) => {\r\n  const reviewContainer = document.getElementById('addReview');\r\n  const formTitle = document.createElement('h4');\r\n  formTitle.innerHTML = 'Add Your Own Review!';\r\n  reviewContainer.appendChild(formTitle);\r\n\r\n  const reviewForm = document.createElement('form');\r\n  reviewForm.id = 'addReviewForm';\r\n  \r\n  const nameDiv = document.createElement('div');\r\n  nameDiv.className = 'formDivider';\r\n  const nameLabel = document.createElement('label');\r\n  nameLabel.htmlFor = 'name';\r\n  nameLabel.innerHTML = 'Your Name:';\r\n  const nameInput = document.createElement('input');\r\n  nameInput.type = 'text';\r\n  nameInput.name = 'user_name';\r\n  nameInput.id = 'name';\r\n  nameDiv.appendChild(nameLabel);\r\n  nameDiv.appendChild(nameInput);\r\n\r\n  reviewForm.appendChild(nameDiv);\r\n\r\n  const rateDiv = document.createElement('div');\r\n  rateDiv.className = 'formDivider';\r\n  const rateLabel = document.createElement('label');\r\n  rateLabel.htmlFor = 'rating';\r\n  rateLabel.innerHTML = 'Rating: <br> (1 low, 5 high)';\r\n  const rateInput = document.createElement('input');\r\n  rateInput.type = 'number';\r\n  rateInput.name = 'user_rating';\r\n  rateInput.id = 'rating';\r\n  rateDiv.appendChild(rateLabel);\r\n  rateDiv.appendChild(rateInput);\r\n\r\n  reviewForm.appendChild(rateDiv);\r\n\r\n  const commentDiv = document.createElement('div');\r\n  commentDiv.className = 'formDivider';\r\n  const commentLabel = document.createElement('label');\r\n  commentLabel.htmlFor = 'uReview';\r\n  commentLabel.innerHTML = 'Comments:';\r\n  const commentInput = document.createElement('textarea');\r\n  commentInput.name = 'user_review';\r\n  commentInput.id = 'uReview';\r\n  commentInput.placeholder = 'How was this place?';\r\n  commentDiv.appendChild(commentLabel);\r\n  commentDiv.appendChild(commentInput);\r\n\r\n  reviewForm.appendChild(commentDiv);\r\n  \r\n  const reviewSubmit = document.createElement('button');\r\n  reviewSubmit.type = 'submit';\r\n  reviewSubmit.id = 'submitReview';\r\n  reviewSubmit.innerHTML = 'Post Review';\r\n\r\n  reviewForm.appendChild(reviewSubmit);\r\n\r\n  reviewContainer.appendChild(reviewForm);\r\n\r\n  reviewForm.addEventListener('submit', function(event) {\r\n    event.preventDefault();\r\n    newReview(rest_id, reviewContainer, reviewForm);\r\n  })\r\n\r\n  return reviewContainer;\r\n}\r\n\r\nnewReview = (id, formDiv, data) => {\r\n  //build the review, per the server's specifications\r\n  const review = {\r\n    \"restaurant_id\": id,\r\n    \"name\": data.user_name.value,\r\n    \"rating\": parseInt(data.user_rating.value, 10),\r\n    \"comments\": data.user_review.value\r\n  };\r\n  const posturl = 'http://localhost:1337/reviews/';\r\n\r\n  // try to post the review to the server\r\n  fetch(posturl, {\r\n    method: 'POST',\r\n    body: JSON.stringify(review)\r\n  })\r\n  .then(res => res.json())\r\n  .then(\r\n    // if response code is good - success! add new review to main db & reload reviews\r\n    (res) => {\r\n      console.log('Success! Your review has been received. Response: ', res);\r\n      DBHelper.stashReview('online', res);\r\n      updateFormDiv(formDiv);\r\n    })\r\n  // if fetch didn't work, store the new review in the temp db and reload reviews\r\n  .catch(error => {\r\n    console.error('Sorry, fetch failed! Storing review offline. Error code: ', error);\r\n    DBHelper.stashReview('offline', review);  \r\n    updateFormDiv(formDiv);\r\n  })\r\n}\r\n\r\nupdateFormDiv = (formDiv) => {\r\n  formDiv.innerHTML = `\r\n    <p> Thanks for adding your review! Reload the page to see your review live! </p>\r\n    <button class='reloadBtn'><a href=\" ${window.location.href} \"> Reload now? </a></button>\r\n  `\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n"]}
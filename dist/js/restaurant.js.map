{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","keypath","transaction","objectStore","createIndex","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","store","db","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","reviews","review","index","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","tx","currStore","is_favorite","method","put","complete","button","on","querySelector","off","classList","contains","favStatus","toggle","document","addEventListener","event","initMap","fetchRestaurantFromURL","self","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","fetchReviewsById","Object","keys","length","fillReviewsHTML","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","setAttribute","favOn","createElement","favOff","favButton","append","e","preventDefault","toggleFav","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","day","appendChild","time","container","noReviews","ul","createReviewHTML","formHolder","formFunction","restaurant_id","li","rating","comments","rest_id","reviewContainer","formTitle","reviewForm","nameDiv","nameLabel","htmlFor","nameInput","type","rateDiv","rateLabel","rateInput","commentDiv","commentLabel","commentInput","placeholder","reviewSubmit","newReview","formDiv","data","user_name","value","parseInt","user_rating","user_review","body","JSON","stringify","res","breadcrumb","window","location","href","replace","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n // First - open our db, or initialize if it's the first time\r\nconst dbPromise = idb.open('restaurantReviewSite', 4, function (upgradeDb) {\r\n  switch(upgradeDb.oldVersion) {\r\n    case 0:\r\n    case 1:\r\n      upgradeDb.createObjectStore('storeInfo', {\r\n        keypath: 'id'\r\n      })\r\n    case 2:\r\n      upgradeDb.createObjectStore('reviews', {\r\n        keypath: 'id'\r\n      })\r\n    case 3:\r\n      var newIndex = upgradeDb.transaction.objectStore('reviews');\r\n      newIndex.createIndex('rest_ID', 'restaurant_id');\r\n  };\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n        const restaurants = response;\r\n        restaurants.forEach(restaurant => {\r\n          dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n            const tx = db.transaction('storeInfo', 'readwrite');\r\n            const store = tx.objectStore('storeInfo');\r\n            // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n            const request = await store.get(restaurant.id);\r\n            if (!request) {\r\n              console.log('store is not in db, adding now');\r\n              store.add(restaurant, restaurant.id);\r\n            }\r\n          });\r\n        });\r\n        callback(null, restaurants);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n      dbPromise.then(function(db) {\r\n        const tx = db.transaction('storeInfo', 'readwrite');\r\n        const store = tx.objectStore('storeInfo');\r\n        return store.getAll();\r\n      })\r\n      .then(function(response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      })\r\n    });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`; \r\n    fetch(reviewURL)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) {\r\n        const reviews = response;\r\n        reviews.forEach(review => {\r\n          dbPromise.then(async db => { \r\n            const tx = db.transaction('reviews', 'readwrite');\r\n            const store = tx.objectStore('reviews');\r\n            const request = await store.get(review.id);\r\n            if (!request) {\r\n              console.log('new review found! adding to cache');\r\n              store.add(review, review.id);\r\n            }\r\n          });\r\n        });\r\n        callback(null, reviews);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Looks like you're offline - pulling cached reviews for you now`);\r\n      dbPromise.then(function(db) {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        const restIdIndex = store.index('rest_ID');\r\n        return restIdIndex.getAll(id);\r\n      })\r\n      .then(function(response) {\r\n        const reviews = response;\r\n        callback(null, reviews);\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  // Toggle favorite status\r\n  static favStatus(status, id) {\r\n    dbPromise.then(async db => {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n      \r\n      const req = await store.get(id);\r\n      const currStore = req;\r\n      currStore.is_favorite = status;\r\n      fetch(`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`, {\r\n        method: 'PUT'\r\n      });\r\n      store.put(currStore, id);\r\n      return tx.complete;\r\n    })\r\n    .then(function() {\r\n      console.log('transaction complete!');\r\n    })\r\n  }\r\n\r\n  static toggleFav(button, id) {\r\n    // function to toggle favorite button\r\n    console.log(button);\r\n    const on = button.querySelector('.on');\r\n    const off = button.querySelector('.off');\r\n\r\n    if (on.classList.contains('hide')) {\r\n      DBHelper.favStatus('true', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    } else if (off.classList.contains('hide')) {\r\n      DBHelper.favStatus('false', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    }\r\n  }\r\n\r\n} //end of class\r\n","let restaurant;\r\nlet reviews;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  initMap();\r\n  \r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n    DBHelper.fetchReviewsById(id, (error, reviews) => {\r\n      self.reviews = reviews;\r\n      if (!reviews) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      if (Object.keys(reviews).length == 0) {\r\n        return;\r\n      }\r\n      fillReviewsHTML();\r\n      callback(null, reviews);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n  cuisine.setAttribute('aria-label', `${restaurant.cuisine_type} restaurant`);\r\n\r\n  const favOn = document.createElement('img'); \r\n  favOn.src = `./img/icons/fav_on.svg`;\r\n  favOn.className = 'favorite on';\r\n  const favOff = document.createElement('img');\r\n  favOff.src = `./img/icons/fav_off.svg`;\r\n  favOff.className = 'favorite off';\r\n   if (restaurant.is_favorite == 'false') {\r\n    favOn.classList.add('hide');\r\n  } else if (restaurant.is_favorite == 'true') {\r\n    favOff.classList.add('hide');\r\n  }\r\n  const favButton = document.getElementById('fav');\r\n  favButton.append(favOn, favOff);\r\n  \r\n  favButton.addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    DBHelper.toggleFav(favButton, restaurant.id);\r\n  })\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n  container.setAttribute('aria-label', 'Reviews');\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n\r\n  const formHolder = formFunction(reviews[0].restaurant_id);\r\n  container.appendChild(formHolder);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\nformFunction = (rest_id) => {\r\n  const reviewContainer = document.getElementById('addReview');\r\n  const formTitle = document.createElement('h4');\r\n  formTitle.innerHTML = 'Add Your Own Review!';\r\n  reviewContainer.appendChild(formTitle);\r\n\r\n  const reviewForm = document.createElement('form');\r\n  reviewForm.id = 'addReviewForm';\r\n  \r\n  const nameDiv = document.createElement('div');\r\n  nameDiv.className = 'formDivider';\r\n  const nameLabel = document.createElement('label');\r\n  nameLabel.htmlFor = 'name';\r\n  nameLabel.innerHTML = 'Your Name:';\r\n  const nameInput = document.createElement('input');\r\n  nameInput.type = 'text';\r\n  nameInput.name = 'user_name';\r\n  nameInput.id = 'name';\r\n  nameDiv.appendChild(nameLabel);\r\n  nameDiv.appendChild(nameInput);\r\n\r\n  reviewForm.appendChild(nameDiv);\r\n\r\n  const rateDiv = document.createElement('div');\r\n  rateDiv.className = 'formDivider';\r\n  const rateLabel = document.createElement('label');\r\n  rateLabel.htmlFor = 'rating';\r\n  rateLabel.innerHTML = 'Rating: <br> (1 low, 5 high)';\r\n  const rateInput = document.createElement('input');\r\n  rateInput.type = 'number';\r\n  rateInput.name = 'user_rating';\r\n  rateInput.id = 'rating';\r\n  rateDiv.appendChild(rateLabel);\r\n  rateDiv.appendChild(rateInput);\r\n\r\n  reviewForm.appendChild(rateDiv);\r\n\r\n  const commentDiv = document.createElement('div');\r\n  commentDiv.className = 'formDivider';\r\n  const commentLabel = document.createElement('label');\r\n  commentLabel.htmlFor = 'uReview';\r\n  commentLabel.innerHTML = 'Comments:';\r\n  const commentInput = document.createElement('textarea');\r\n  commentInput.name = 'user_review';\r\n  commentInput.id = 'uReview';\r\n  commentInput.placeholder = 'How was this place?';\r\n  commentDiv.appendChild(commentLabel);\r\n  commentDiv.appendChild(commentInput);\r\n\r\n  reviewForm.appendChild(commentDiv);\r\n  \r\n  const reviewSubmit = document.createElement('button');\r\n  reviewSubmit.type = 'submit';\r\n  reviewSubmit.id = 'submitReview';\r\n  reviewSubmit.innerHTML = 'Post Review';\r\n\r\n  reviewForm.appendChild(reviewSubmit);\r\n\r\n  reviewContainer.appendChild(reviewForm);\r\n\r\n  reviewForm.addEventListener('submit', function(event) {\r\n    event.preventDefault();\r\n    newReview(rest_id, reviewContainer, reviewForm);\r\n  })\r\n\r\n  return reviewContainer;\r\n}\r\n\r\nnewReview = (id, formDiv, data) => {\r\n  const review = {\r\n    \"restaurant_id\": id,\r\n    \"name\": data.user_name.value,\r\n    \"rating\": parseInt(data.user_rating.value, 10),\r\n    \"comments\": data.user_review.value\r\n  };\r\n  const posturl = 'http://localhost:1337/reviews/';\r\n\r\n  fetch(posturl, {\r\n    method: 'POST',\r\n    body: JSON.stringify(review)\r\n  })\r\n  .then(res => res.json())\r\n  .then(\r\n    response => console.log('Success:', response)\r\n  )\r\n  .then(\r\n    formDiv.innerHTML = `Thanks for submitting your review!`\r\n  )\r\n  .catch(error => console.error('Error:', error));\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n"]}
{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["dbPromise","idb","open","upgradeDb","createObjectStore","keypath","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","restStore","db","transaction","objectStore","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","self","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","fetchReviewsById","reviews","fillReviewsHTML","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","setAttribute","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","container","noReviews","ul","review","createReviewHTML","li","rating","comments","breadcrumb","window","location","href","replace","RegExp","exec","decodeURIComponent"],"mappings":"AAKA,MAAAA,UAAAC,IAAAC,KAAA,uBAAA,EAAA,SAAAC,GACAA,EAAAC,kBAAA,cAAA,CACAC,QAAA,SAIA,MAAAC,SAMAC,0BAEA,MAAA,yBAMAC,wBAAAC,GAEAC,SAAAJ,SAAAC,2BACAI,KAAAC,GAAAA,EAAAC,QACAF,KAAA,SAAAC,GACA,GAAAA,EAAA,CACA,MAAAE,EAAAF,EACAE,EAAAC,QAAAC,IACAhB,UAAAW,KAAAM,MAAAA,IACA,MACAC,EADAC,EAAAC,YAAA,cAAA,aACAC,YAAA,qBAEAH,EAAAI,IAAAN,EAAAO,MAEAC,QAAAC,IAAA,kCACAP,EAAAQ,IAAAV,EAAAA,EAAAO,SAIAd,EAAA,KAAAK,OACA,CACA,MAAAa,qBAAAf,EAAAgB,YAAAhB,EAAAiB,aACApB,EAAAkB,EAAA,SAGAG,MAAA,WACAN,QAAAC,IAAA,qFAEAzB,UAAAW,KAAA,SAAAQ,GAGA,OAFAA,EAAAC,YAAA,cAAA,aACAC,YAAA,eACAU,WAEApB,KAAA,SAAAC,GAEAH,EAAA,KADAG,OAMAJ,wBAAAe,EAAAd,GAEA,MAAAuB,KAAA1B,SAAAC,sCAAAgB,IACAb,MAAAsB,GACArB,KAAAC,GAAAA,EAAAC,QACAF,KAAA,SAAAC,GACA,GAAAA,EAAA,CAEAH,EAAA,KADAG,OAEA,CACA,MAAAe,qBAAAf,EAAAgB,YAAAhB,EAAAiB,aACApB,EAAAkB,EAAA,SAGAG,MAAA,WACAN,QAAAC,IAAA,uBAOAjB,2BAAAe,EAAAd,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CACA,MAAAX,EAAAF,EAAAoB,KAAAC,GAAAA,EAAAZ,IAAAA,GACAP,EACAP,EAAA,KAAAO,GAEAP,EAAA,4BAAA,SASAD,gCAAA4B,EAAA3B,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CAEA,MAAAU,EAAAvB,EAAAwB,OAAAH,GAAAA,EAAAI,cAAAH,GACA3B,EAAA,KAAA4B,MAQA7B,qCAAAgC,EAAA/B,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CAEA,MAAAU,EAAAvB,EAAAwB,OAAAH,GAAAA,EAAAK,cAAAA,GACA/B,EAAA,KAAA4B,MAQA7B,+CAAA4B,EAAAI,EAAA/B,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CACA,IAAAU,EAAAvB,EACA,OAAAsB,IACAC,EAAAA,EAAAC,OAAAH,GAAAA,EAAAI,cAAAH,IAEA,OAAAI,IACAH,EAAAA,EAAAC,OAAAH,GAAAA,EAAAK,cAAAA,IAEA/B,EAAA,KAAA4B,MAQA7B,0BAAAC,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CAEA,MAAAc,EAAA3B,EAAA4B,IAAA,CAAAC,EAAAC,IAAA9B,EAAA8B,GAAAJ,cAEAK,EAAAJ,EAAAH,OAAA,CAAAK,EAAAC,IAAAH,EAAAK,QAAAH,IAAAC,GACAnC,EAAA,KAAAoC,MAQArC,qBAAAC,GAEAH,SAAA2B,iBAAA,CAAAN,EAAAb,KACA,GAAAa,EACAlB,EAAAkB,EAAA,UACA,CAEA,MAAAoB,EAAAjC,EAAA4B,IAAA,CAAAC,EAAAC,IAAA9B,EAAA8B,GAAAL,cAEAS,EAAAD,EAAAT,OAAA,CAAAK,EAAAC,IAAAG,EAAAD,QAAAH,IAAAC,GACAnC,EAAA,KAAAuC,MAQAxC,wBAAAQ,GACA,8BAAAA,EAAAO,KAMAf,6BAAAQ,GACA,yBAAAA,EAAAiC,2BAMAzC,8BAAAQ,EAAA0B,GAEA,MAAAQ,EAAA,IAAAC,EAAAD,OAAA,CAAAlC,EAAAoC,OAAAC,IAAArC,EAAAoC,OAAAE,KACA,CACAC,MAAAvC,EAAAwC,KACAC,IAAAzC,EAAAwC,KACAE,IAAApD,SAAAqD,iBAAA3C,KAGA,OADAkC,EAAAU,MAAAC,QACAX,GC1NA,IAAAlC,WACA,IAAA6C,OAKAC,SAAAC,iBAAA,mBAAAC,IACAC,YAMAA,QAAA,MACAC,uBAAA,CAAAvC,EAAAX,KACAW,EACAH,QAAAG,MAAAA,IAEAwC,KAAAN,OAAAV,EAAAT,IAAA,MAAA,CACA0B,OAAA,CAAApD,EAAAoC,OAAAC,IAAArC,EAAAoC,OAAAE,KACAe,KAAA,GACAC,iBAAA,IAEAnB,EAAAoB,UAAA,oFAAA,CACAC,YAAA,+FACAC,QAAA,GACAC,YAAA,0NAGAnD,GAAA,mBACAqC,MAAAC,QACAc,iBACArE,SAAAsE,uBAAAT,KAAAnD,WAAAmD,KAAAN,aAQAK,uBAAA,CAAAzD,IACA,GAAA0D,KAAAnD,WAEA,YADAP,EAAA,KAAA0D,KAAAnD,YAGA,MAAAO,EAAAsD,mBAAA,MACAtD,GAIAjB,SAAAwE,oBAAAvD,EAAA,CAAAI,EAAAX,KACAmD,KAAAnD,WAAAA,EACAA,GAIA+D,qBACAtE,EAAA,KAAAO,IAJAQ,QAAAG,MAAAA,KAMArB,SAAA0E,iBAAAzD,EAAA,CAAAI,EAAAsD,KACAd,KAAAc,QAAAA,EACAA,GAIAC,kBACAzE,EAAA,KAAAwE,IAJAzD,QAAAG,MAAAA,OAfAA,MAAA,0BACAlB,EAAAkB,MAAA,SA0BAoD,mBAAA,EAAA/D,EAAAmD,KAAAnD,cACA8C,SAAAqB,eAAA,mBACAC,UAAApE,EAAAwC,KAEAM,SAAAqB,eAAA,sBACAC,UAAApE,EAAAqE,QAEA,MAAAC,EAAAxB,SAAAqB,eAAA,kBACAG,EAAAC,UAAA,iBACAD,EAAAE,IAAAlF,SAAAmF,sBAAAzE,GACAsE,EAAA7B,4CAAAzC,EAAAwC,OAEA,MAAApB,EAAA0B,SAAAqB,eAAA,sBACA/C,EAAAgD,UAAApE,EAAAuB,aACAH,EAAAsD,aAAA,gBAAA1E,EAAAuB,2BAGAvB,EAAA2E,iBACAC,4BASAA,wBAAA,EAAAC,EAAA1B,KAAAnD,WAAA2E,mBACA,MAAAG,EAAAhC,SAAAqB,eAAA,oBACA,IAAA,IAAAY,KAAAF,EAAA,CACA,MAAAG,EAAAlC,SAAAmC,cAAA,MAEAC,EAAApC,SAAAmC,cAAA,MACAC,EAAAd,UAAAW,EACAC,EAAAG,YAAAD,GAEA,MAAAE,EAAAtC,SAAAmC,cAAA,MACAG,EAAAhB,UAAAS,EAAAE,GACAC,EAAAG,YAAAC,GAEAN,EAAAK,YAAAH,MAOAd,gBAAA,EAAAD,EAAAd,KAAAc,WACA,MAAAoB,EAAAvC,SAAAqB,eAAA,qBACA5B,EAAAO,SAAAmC,cAAA,MAKA,GAJA1C,EAAA6B,UAAA,UACAiB,EAAAF,YAAA5C,GACA8C,EAAAX,aAAA,aAAA,YAEAT,EAAA,CACA,MAAAqB,EAAAxC,SAAAmC,cAAA,KAGA,OAFAK,EAAAlB,UAAA,uBACAiB,EAAAF,YAAAG,GAGA,MAAAC,EAAAzC,SAAAqB,eAAA,gBACAF,EAAAlE,QAAAyF,IACAD,EAAAJ,YAAAM,iBAAAD,MAEAH,EAAAF,YAAAI,KAMAE,iBAAA,CAAAD,IACA,MAAAE,EAAA5C,SAAAmC,cAAA,MACAzC,EAAAM,SAAAmC,cAAA,KACAzC,EAAA4B,UAAAoB,EAAAhD,KACAkD,EAAAP,YAAA3C,GAEA,MAAAmD,EAAA7C,SAAAmC,cAAA,KACAU,EAAAvB,qBAAAoB,EAAAG,SACAD,EAAAP,YAAAQ,GAEA,MAAAC,EAAA9C,SAAAmC,cAAA,KAIA,OAHAW,EAAAxB,UAAAoB,EAAAI,SACAF,EAAAP,YAAAS,GAEAF,IAMA/B,eAAA,EAAA3D,EAAAmD,KAAAnD,cACA,MAAA6F,EAAA/C,SAAAqB,eAAA,cACAuB,EAAA5C,SAAAmC,cAAA,MACAS,EAAAtB,UAAApE,EAAAwC,KACAqD,EAAAV,YAAAO,KAMA7B,mBAAA,EAAArB,EAAAE,KACAA,IACAA,EAAAoD,OAAAC,SAAAC,MACAxD,EAAAA,EAAAyD,QAAA,UAAA,QACA,MACA5E,EADA,IAAA6E,cAAA1D,sBACA2D,KAAAzD,GACA,OAAArB,EAEAA,EAAA,GAEA+E,mBAAA/E,EAAA,GAAA4E,QAAA,MAAA,MADA,GAFA","file":"restaurant.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n // First - open our db, or initialize if it's the first time\r\n const dbPromise = idb.open('restaurantReviewSite', 1, function (upgradeDb) {\r\n  upgradeDb.createObjectStore('restReviews', {\r\n    keypath: 'id'\r\n  });\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n        const restaurants = response;\r\n        restaurants.forEach(restaurant => {\r\n          dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n            const tx = db.transaction('restReviews', 'readwrite');\r\n            const restStore = tx.objectStore('restReviews');\r\n            // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n            const request = await restStore.get(restaurant.id);\r\n            if (!request) {\r\n              console.log('store is not in db, adding now');\r\n              restStore.add(restaurant, restaurant.id);\r\n            }\r\n          });\r\n        });\r\n        callback(null, restaurants);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n      dbPromise.then(function(db) {\r\n        const tx = db.transaction('restReviews', 'readwrite');\r\n        const restStore = tx.objectStore('restReviews');\r\n        return restStore.getAll();\r\n      })\r\n      .then(function(response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      })\r\n    });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`; \r\n    fetch(reviewURL)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) {\r\n        const reviews = response;\r\n        callback(null, reviews);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Didn't call fetch`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n}\r\n\r\n","let restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n    DBHelper.fetchReviewsById(id, (error, reviews) => {\r\n      self.reviews = reviews;\r\n      if (!reviews) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillReviewsHTML();\r\n      callback(null, reviews);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n  cuisine.setAttribute('aria-label', `${restaurant.cuisine_type} restaurant`);\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  // fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n  container.setAttribute('aria-label', 'Reviews');\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}
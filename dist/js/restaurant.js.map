{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","error","status","statusText","id","fetchRestaurants","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","console","self","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","setAttribute","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","window","location","href","replace","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n    .then(response => response.json())\r\n    .then(function(response) {\r\n      if (response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      } else {\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    }\r\n\r\n/*\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n*/\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n","let restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/* window.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n} */\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n  cuisine.setAttribute('aria-label', `${restaurant.cuisine_type} restaurant`);\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n  container.setAttribute('aria-label', 'Reviews');\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}
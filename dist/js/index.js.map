{"version":3,"sources":["dbhelper.js","main.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","keypath","transaction","objectStore","createIndex","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","store","db","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","reviews","review","temp","index","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","tx","currStore","is_favorite","method","put","complete","button","on","querySelector","off","classList","contains","favStatus","toggle","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","fav","favOn","favOff","trigger","e","preventDefault","toggleFav","address","more","setAttribute","href","mapMarkerForRestaurant","window","location","options","push"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n // First - open our db, or initialize if it's the first time\r\nconst dbPromise = idb.open('restaurantReviewSite', 5, function (upgradeDb) {\r\n  switch(upgradeDb.oldVersion) {\r\n    case 0:\r\n    case 1:\r\n      upgradeDb.createObjectStore('storeInfo', {\r\n        keypath: 'id'\r\n      })\r\n    case 2:\r\n      upgradeDb.createObjectStore('reviews', {\r\n        keypath: 'id'\r\n      })\r\n    case 3:\r\n      var newIndex = upgradeDb.transaction.objectStore('reviews');\r\n      newIndex.createIndex('rest_ID', 'restaurant_id');\r\n    case 4:\r\n      upgradeDb.createObjectStore('tempStorage', {\r\n        keypath: 'id'\r\n      })\r\n  };\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n        const restaurants = response;\r\n        restaurants.forEach(restaurant => {\r\n          dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n            const tx = db.transaction('storeInfo', 'readwrite');\r\n            const store = tx.objectStore('storeInfo');\r\n            // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n            const request = await store.get(restaurant.id);\r\n            if (!request) {\r\n              console.log('store is not in db, adding now');\r\n              store.add(restaurant, restaurant.id);\r\n            }\r\n          });\r\n        });\r\n        callback(null, restaurants);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n      dbPromise.then(function(db) {\r\n        const tx = db.transaction('storeInfo', 'readwrite');\r\n        const store = tx.objectStore('storeInfo');\r\n        return store.getAll();\r\n      })\r\n      .then(function(response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      })\r\n    });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`; \r\n    fetch(reviewURL)\r\n    .then(response => response.json()) // parse the server response\r\n    .then(function (response) {\r\n      if (response) {\r\n        const reviews = response;\r\n        reviews.forEach(review => {\r\n          dbPromise.then(async db => { \r\n            const tx = db.transaction('reviews', 'readwrite');\r\n            const store = tx.objectStore('reviews');\r\n            const request = await store.get(review.id);\r\n            if (!request) {\r\n              console.log('new review found! adding to cache');\r\n              store.add(review, review.id);\r\n            }\r\n          });\r\n        });\r\n        callback(null, reviews);\r\n      } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    .catch(function () { // then, if the fetch fails, we call our db and check there\r\n      console.log(`Looks like you're offline - pulling cached reviews for you now`);\r\n      dbPromise.then(function(db) {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        const restIdIndex = store.index('rest_ID');\r\n        const temp = restIdIndex.getAll(id);\r\n        console.log('reviews from storage by restId: ' + temp);\r\n        return temp;\r\n      })\r\n      .then(function(response) {\r\n        const reviews = response;\r\n        console.log('catch response: ' + reviews);\r\n        callback(null, reviews);\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  // Toggle favorite status\r\n  static favStatus(status, id) {\r\n    dbPromise.then(async db => {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n      \r\n      const req = await store.get(id);\r\n      const currStore = req;\r\n      currStore.is_favorite = status;\r\n      fetch(`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`, {\r\n        method: 'PUT'\r\n      });\r\n      store.put(currStore, id);\r\n      return tx.complete;\r\n    })\r\n    .then(function() {\r\n      console.log('transaction complete!');\r\n    })\r\n  }\r\n\r\n  static toggleFav(button, id) {\r\n    // function to toggle favorite button\r\n    console.log(button);\r\n    const on = button.querySelector('.on');\r\n    const off = button.querySelector('.off');\r\n\r\n    if (on.classList.contains('hide')) {\r\n      DBHelper.favStatus('true', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    } else if (off.classList.contains('hide')) {\r\n      DBHelper.favStatus('false', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    }\r\n  }\r\n\r\n  static stashReview(status, review) {\r\n    // if user is online, add review to main db\r\n    if (status === 'online') {\r\n      dbPromise.then(db => { \r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        const addReviewToMain = store.add(review, review.id);\r\n        return tx.complete;\r\n      });\r\n    }\r\n    // if user is offline, add review to temp db\r\n    if (status === 'offline') {\r\n      dbPromise.then(db => { \r\n        const tx = db.transaction('tempStorage', 'readwrite');\r\n        const store = tx.objectStore('tempStorage');\r\n        const addReviewToTemp = store.add(review, review.id);\r\n        return tx.complete;\r\n      });\r\n    }\r\n  }\r\n\r\n} //end of class\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n    addMarkersToMap();\r\n  });\r\n};  \r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const fav = document.createElement('button');\r\n  fav.className = ('favButton');\r\n  const favOn = document.createElement('img'); \r\n  favOn.src = `./img/icons/fav_on.svg`;\r\n  favOn.className = 'favorite on';\r\n  const favOff = document.createElement('img');\r\n  favOff.src = `./img/icons/fav_off.svg`;\r\n  favOff.className = 'favorite off';\r\n  if (restaurant.is_favorite == 'true') {\r\n    favOff.classList.add('hide');\r\n  }\r\n  if (restaurant.is_favorite == 'false') {\r\n  favOn.classList.add('hide');\r\n  } \r\n  fav.append(favOff, favOn);\r\n  li.append(fav);\r\n\r\n  const trigger = li.querySelector('.favButton');\r\n  \r\n  trigger.addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    DBHelper.toggleFav(trigger, restaurant.id);\r\n  })\r\n  \r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n\r\n"]}
{"version":3,"sources":["dbhelper.js","main.js"],"names":["DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","error","status","statusText","id","fetchRestaurants","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","markers","dbPromise","idb","open","upgradeDb","createObjectStore","keypath","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","db","tx","transaction","objectStore","add","complete","log","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","address","more","setAttribute","href","mapMarkerForRestaurant","on","window","location","options","push"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n    .then(response => response.json())\r\n    .then(function(response) {\r\n      if (response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      } else {\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    }\r\n\r\n/*\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n*/\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n}\r\n\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Open our idb db & create the objectStore\r\n */\r\nconst dbPromise = idb.open('restaurantReviewSite', 2, function (upgradeDb) {\r\n  const restStore = upgradeDb.createObjectStore('restReviews', {\r\n    keypath: 'id'\r\n  });\r\n});\r\n\r\n\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n\r\n    dbPromise.then(function(db) {\r\n      const tx = db.transaction('restReviews', 'readwrite');\r\n      const restStore = tx.objectStore('restReviews');\r\n      restStore.add(restaurant, restaurant.id);\r\n      return tx.complete;\r\n    }).then(console.log(`Restaurant ${restaurant.id} added.`));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} "]}
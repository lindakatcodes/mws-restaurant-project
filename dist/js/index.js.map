{"version":3,"sources":["dbhelper.js","main.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","keypath","transaction","objectStore","createIndex","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","store","db","hasOwnProperty","offlineUpdate","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","reviews","review","index","parseInt","stashedReviews","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","method","tx","currStore","is_favorite","put","complete","button","on","querySelector","off","classList","contains","favStatus","toggle","allStores","lastID","length","openCursor","cycleItems","value","req","continue","cycleReviews","cursor","currReview","delete","undefined","body","JSON","stringify","markers","document","addEventListener","event","navigator","onLine","updateServer","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","fav","setAttribute","favOn","favOff","trigger","e","preventDefault","toggleFav","address","more","href","mapMarkerForRestaurant","window","location","options","push"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n// First - open our db, or initialize if it's the first time\r\nconst dbPromise = idb.open('restaurantReviewSite', 7, function (upgradeDb) {\r\n  switch (upgradeDb.oldVersion) {\r\n    case 0:\r\n    case 1:\r\n      upgradeDb.createObjectStore('storeInfo', {\r\n        keypath: 'id'\r\n      })\r\n    case 2:\r\n      upgradeDb.createObjectStore('reviews', {\r\n        keypath: 'id'\r\n      })\r\n    case 3:\r\n      var newIndex = upgradeDb.transaction.objectStore('reviews');\r\n      newIndex.createIndex('rest_ID', 'restaurant_id');\r\n  };\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n          const restaurants = response;\r\n          restaurants.forEach(restaurant => {\r\n            dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n              const tx = db.transaction('storeInfo', 'readwrite');\r\n              const store = tx.objectStore('storeInfo');\r\n\r\n              if (!restaurant.hasOwnProperty('offlineUpdate')) {\r\n                restaurant.offlineUpdate = false;\r\n              }\r\n\r\n              // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n              const request = await store.get(restaurant.id);\r\n              if (!request) {\r\n                console.log('store is not in db, adding now');\r\n                store.add(restaurant, restaurant.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, restaurants);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n          return store.getAll();\r\n        })\r\n          .then(function (response) {\r\n            const restaurants = response;\r\n            callback(null, restaurants);\r\n          })\r\n      });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    console.log('inside fetchReviewsById');\r\n\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`;\r\n    fetch(reviewURL)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) {\r\n          console.log('fetch worked - dealing with response now');\r\n          const reviews = response;\r\n          reviews.forEach(review => {\r\n            dbPromise.then(async db => {\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n\r\n              if (!review.hasOwnProperty('offlineUpdate')) {\r\n                review.offlineUpdate = false;\r\n              }\r\n\r\n              const request = await store.get(review.id);\r\n              if (!request) {\r\n                console.log('new review found! adding to cache');\r\n                store.add(review, review.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, reviews);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          console.log('fetch worked, but there was not any data');\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`inside the catch function of fetchReviewsById`);\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('reviews', 'readwrite');\r\n          const store = tx.objectStore('reviews');\r\n          const restIdIndex = store.index('rest_ID');\r\n          const temp = restIdIndex.getAll(parseInt(id, 10));\r\n          return temp;\r\n        })\r\n          .then(function (stashedReviews) {\r\n            const reviews = stashedReviews;\r\n            callback(null, reviews);\r\n          })\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  // Toggle favorite status\r\n  static favStatus(status, id) {\r\n    fetch(`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`, {\r\n      method: 'PUT'\r\n    })\r\n      .then(() => {\r\n        dbPromise.then(async db => {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n\r\n          const req = await store.get(id);\r\n          const currStore = req;\r\n          currStore.is_favorite = status;\r\n\r\n          store.put(currStore, id);\r\n          console.log('favorite status is marked!');\r\n          return tx.complete;\r\n        })\r\n      })\r\n      .catch(() => {\r\n        dbPromise.then(async db => {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n\r\n          const req = await store.get(id);\r\n          const currStore = req;\r\n          currStore.is_favorite = status;\r\n          currStore.offlineUpdate = true;\r\n\r\n          store.put(currStore, id);\r\n          console.log('favorite status is marked! will be updated on server when reconnected.');\r\n          return tx.complete;\r\n        })\r\n      })\r\n  }\r\n\r\n  static toggleFav(button, id) {\r\n    // function to toggle favorite button\r\n    const on = button.querySelector('.on');\r\n    const off = button.querySelector('.off');\r\n\r\n    if (on.classList.contains('hide')) {\r\n      DBHelper.favStatus('true', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    } else if (off.classList.contains('hide')) {\r\n      DBHelper.favStatus('false', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    }\r\n  }\r\n\r\n  static stashReview(status, review) {\r\n    // we're offline, a few things to do\r\n    if (status === 'offline') {\r\n      // set update flag on\r\n      review.offlineUpdate = true;\r\n      // get the id of the last item in our db, then set review.id to that +1\r\n      // then add the review to the db\r\n      dbPromise.then(async db => {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        const allStores = await store.getAll();\r\n        const lastID = allStores[allStores.length - 1].id;\r\n        review.id = lastID + 1;\r\n        return store.add(review, review.id);\r\n      })\r\n    }\r\n\r\n    if (status === 'online') {\r\n      // we're online, just add review to idb\r\n      dbPromise.then(db => {\r\n        const tx = db.transaction('reviews', 'readwrite');\r\n        const store = tx.objectStore('reviews');\r\n        return store.add(review, review.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  static updateServer() {\r\n\r\n    //first check storeInfo for favorite updates\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleItems(restaurant) {\r\n        if (!restaurant) return;\r\n        // check each store to see if update flag is on\r\n        if (restaurant.value.offlineUpdate) {\r\n          // add the updated favorite status to the server\r\n          fetch(`http://localhost:1337/restaurants/${restaurant.value.id}/?is_favorite=${restaurant.value.is_favorite}`, {\r\n            method: 'PUT'\r\n          })\r\n          // then change the flag and update it on idb\r\n          dbPromise.then(async db => {\r\n            const tx = db.transaction('storeInfo', 'readwrite');\r\n            const store = tx.objectStore('storeInfo');\r\n\r\n            const req = await store.get(restaurant.value.id);\r\n            req.offlineUpdate = false;\r\n            store.put(req, req.id);\r\n          })\r\n        }\r\n        // then, go to the next store and check again\r\n        return restaurant.continue().then(cycleItems);\r\n      })\r\n\r\n    // then check reviews for new ones\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('reviews', 'readwrite');\r\n      const store = tx.objectStore('reviews');\r\n      return store.openCursor();\r\n    })\r\n      .then(function cycleReviews(cursor) {\r\n        if (!cursor) return;\r\n        // store the cursor for easier access\r\n        const currReview = cursor.value;\r\n        console.log(currReview);\r\n        // check current reviews in idb for update flag\r\n        if (currReview.offlineUpdate) {\r\n\r\n          // first, find the current review in idb and delete that - we will likely need to change the review's id, so will post it again once we do that\r\n          cursor.delete();\r\n\r\n          // then, we'll set the id to undefined, so the server will give it the actual unique id (can be duplicates with offline method), and turn the update flag to false\r\n          currReview.id = undefined;\r\n          currReview.offlineUpdate = false;\r\n\r\n          // next, post the updated review to server\r\n          fetch('http://localhost:1337/reviews/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(currReview)\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            \r\n            // then post to idb\r\n            dbPromise.then(async db => {\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n              store.add(response, response.id);\r\n            })\r\n          })\r\n        }\r\n        // then go to next review and do it all again\r\n        return cursor.continue().then(cycleReviews);\r\n      })\r\n  }\r\n\r\n} //end of class\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  if (navigator.onLine) {\r\n    DBHelper.updateServer();\r\n  }\r\n  initMap(); \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n    addMarkersToMap();\r\n  });\r\n};  \r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const fav = document.createElement('button');\r\n  fav.className = ('favButton');\r\n  fav.setAttribute('aria-label', `Toggle this restaurant's favorite status`);\r\n  const favOn = document.createElement('img'); \r\n  favOn.src = `./img/icons/fav_on.svg`;\r\n  favOn.className = 'favorite on';\r\n  favOn.alt = 'Favorite restaurant toggle turned on';\r\n  const favOff = document.createElement('img');\r\n  favOff.src = `./img/icons/fav_off.svg`;\r\n  favOff.className = 'favorite off';\r\n  favOff.alt = 'Favorite restaurant toggle turned off';\r\n  if (restaurant.is_favorite == 'true') {\r\n    favOff.classList.add('hide');\r\n  }\r\n  if (restaurant.is_favorite == 'false') {\r\n  favOn.classList.add('hide');\r\n  } \r\n  fav.append(favOff, favOn);\r\n  li.append(fav);\r\n\r\n  const trigger = li.querySelector('.favButton');\r\n  \r\n  trigger.addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    DBHelper.toggleFav(trigger, restaurant.id);\r\n  })\r\n  \r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n\r\n"]}
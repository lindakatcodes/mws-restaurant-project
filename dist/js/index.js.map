{"version":3,"sources":["dbhelper.js","main.js"],"names":["dbPromise","idb","open","upgradeDb","createObjectStore","keypath","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","restStore","db","transaction","objectStore","get","id","console","log","add","error","status","statusText","catch","getAll","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","address","more","setAttribute","href","mapMarkerForRestaurant","on","window","location","options","push"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n // First - open our db, or initialize if it's the first time\r\n const dbPromise = idb.open('restaurantReviewSite', 1, function (upgradeDb) {\r\n  upgradeDb.createObjectStore('restReviews', {\r\n    keypath: 'id'\r\n  });\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n          const restaurants = response;\r\n          restaurants.forEach(restaurant => {\r\n            dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n              const tx = db.transaction('restReviews', 'readwrite');\r\n              const restStore = tx.objectStore('restReviews');\r\n              // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n              const request = await restStore.get(restaurant.id);\r\n              if (!request) {\r\n                console.log('store is not in db, adding now');\r\n                restStore.add(restaurant, restaurant.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, restaurants);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      // then, if the fetch fails, we call our db and check there\r\n      .catch(function () {\r\n        dbPromise.then(function(db) {\r\n          const tx = db.transaction('restReviews', 'readwrite');\r\n          const restStore = tx.objectStore('restReviews');\r\n          return restStore.getAll();\r\n        })\r\n        .then(function(response) {\r\n          console.log('Pulling restaurant info from db...');\r\n          const restaurants = response;\r\n          callback(null, restaurants);\r\n        })\r\n      });\r\n  }\r\n\r\n  /*\r\n      let xhr = new XMLHttpRequest();\r\n      xhr.open('GET', DBHelper.DATABASE_URL);\r\n      xhr.onload = () => {\r\n        if (xhr.status === 200) { // Got a success response from server!\r\n          const json = JSON.parse(xhr.responseText);\r\n          const restaurants = json.restaurants;\r\n          callback(null, restaurants);\r\n        } else { // Oops!. Got an error from server.\r\n          const error = (`Request failed. Returned status of ${xhr.status}`);\r\n          callback(error, null);\r\n        }\r\n      };\r\n      xhr.send();\r\n    }\r\n  */\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n}\r\n\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n    addMarkersToMap();\r\n  });\r\n};  \r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} "]}
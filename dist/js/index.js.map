{"version":3,"sources":["dbhelper.js","main.js"],"names":["dbPromise","idb","open","upgradeDb","oldVersion","createObjectStore","keypath","transaction","objectStore","createIndex","autoIncrement","DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","json","restaurants","forEach","restaurant","async","store","db","get","id","console","log","add","error","status","statusText","catch","getAll","reviewURL","reviews","review","index","parseInt","stashedReviews","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","tx","currStore","is_favorite","method","put","complete","offlineUpdate","button","on","querySelector","off","classList","contains","favStatus","toggle","updates","update","newReviews","body","JSON","stringify","markers","document","addEventListener","event","navigator","onLine","updateServer","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","fav","setAttribute","favOn","favOff","trigger","e","preventDefault","toggleFav","address","more","href","mapMarkerForRestaurant","window","location","options","push"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\n// First - open our db, or initialize if it's the first time\r\nconst dbPromise = idb.open('restaurantReviewSite', 5, function (upgradeDb) {\r\n  switch (upgradeDb.oldVersion) {\r\n    case 0:\r\n    case 1:\r\n      upgradeDb.createObjectStore('storeInfo', {\r\n        keypath: 'id'\r\n      })\r\n    case 2:\r\n      upgradeDb.createObjectStore('reviews', {\r\n        keypath: 'id'\r\n      })\r\n    case 3:\r\n      var newIndex = upgradeDb.transaction.objectStore('reviews');\r\n      newIndex.createIndex('rest_ID', 'restaurant_id');\r\n    case 4:\r\n      upgradeDb.createObjectStore('tempStorage', {\r\n        keypath: 'id',\r\n        autoIncrement: true\r\n      })\r\n  };\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // First - try to fetch the data from the server\r\n    fetch(`${DBHelper.DATABASE_URL}restaurants`)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) { // if we got a response, set the restaurants value to that and add to idb if not there\r\n          const restaurants = response;\r\n          restaurants.forEach(restaurant => {\r\n            dbPromise.then(async db => { // start a separate transaction for each restaurant, to see if it's in db\r\n              const tx = db.transaction('storeInfo', 'readwrite');\r\n              const store = tx.objectStore('storeInfo');\r\n              // try to get restaurant by id - if it's there, just say it's there - if not, add to db\r\n              const request = await store.get(restaurant.id);\r\n              if (!request) {\r\n                console.log('store is not in db, adding now');\r\n                store.add(restaurant, restaurant.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, restaurants);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`Sorry, your internet doesn't seem to be working. Pulling cached data for you now!`);\r\n\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('storeInfo', 'readwrite');\r\n          const store = tx.objectStore('storeInfo');\r\n          return store.getAll();\r\n        })\r\n          .then(function (response) {\r\n            const restaurants = response;\r\n            callback(null, restaurants);\r\n          })\r\n      });\r\n  }\r\n\r\n  static fetchReviewsById(id, callback) {\r\n    // First - try to fetch the data from the server\r\n    console.log('inside fetchReviewsById');\r\n\r\n    const reviewURL = `${DBHelper.DATABASE_URL}reviews/?restaurant_id=${id}`;\r\n    fetch(reviewURL)\r\n      .then(response => response.json()) // parse the server response\r\n      .then(function (response) {\r\n        if (response) {\r\n          console.log('fetch worked - dealing with response now');\r\n          const reviews = response;\r\n          reviews.forEach(review => {\r\n            dbPromise.then(async db => {\r\n              const tx = db.transaction('reviews', 'readwrite');\r\n              const store = tx.objectStore('reviews');\r\n              const request = await store.get(review.id);\r\n              if (!request) {\r\n                console.log('new review found! adding to cache');\r\n                store.add(review, review.id);\r\n              }\r\n            });\r\n          });\r\n          callback(null, reviews);\r\n        } else { // otherwise, there's no data and an error is thrown - data doesn't exist at all, even if online\r\n          console.log('fetch worked, but there was not any data');\r\n          const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n          callback(error, null);\r\n        }\r\n      })\r\n      .then(() => {\r\n\r\n      })\r\n      .catch(function () { // then, if the fetch fails, we call our db and check there\r\n        console.log(`inside the catch function of fetchReviewsById`);\r\n        dbPromise.then(function (db) {\r\n          const tx = db.transaction('reviews', 'readwrite');\r\n          const store = tx.objectStore('reviews');\r\n          const restIdIndex = store.index('rest_ID');\r\n          const temp = restIdIndex.getAll(parseInt(id, 10));\r\n          return temp;\r\n        })\r\n          .then(function (stashedReviews) {\r\n            const reviews = stashedReviews;\r\n            callback(null, reviews);\r\n          })\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  // Toggle favorite status\r\n  static favStatus(status, id) {\r\n    dbPromise.then(async db => {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n\r\n      const req = await store.get(id);\r\n      const currStore = req;\r\n      currStore.is_favorite = status;\r\n\r\n      fetch(`http://localhost:1337/restaurants/${id}/?is_favorite=${status}`, {\r\n        method: 'PUT'\r\n      })\r\n        .then(() => {\r\n          store.put(currStore, id);\r\n          console.log('favorite status is marked!');\r\n          return tx.complete;\r\n        })\r\n        .catch(() => {\r\n          currStore.offlineUpdate = 'yes';\r\n          console.log(currStore);\r\n          store.put(currStore, id);\r\n          console.log(`you're offline, but  your favorite status will be added when you're online again`);\r\n          return tx.complete;\r\n        })\r\n    })\r\n  }\r\n\r\n  static toggleFav(button, id) {\r\n    // function to toggle favorite button\r\n    const on = button.querySelector('.on');\r\n    const off = button.querySelector('.off');\r\n\r\n    if (on.classList.contains('hide')) {\r\n      DBHelper.favStatus('true', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    } else if (off.classList.contains('hide')) {\r\n      DBHelper.favStatus('false', id);\r\n      on.classList.toggle('hide');\r\n      off.classList.toggle('hide');\r\n    }\r\n  }\r\n\r\n  static stashReview(status, review) {\r\n    // if user is online, add review to main db\r\n    console.log(`in stashReview - here's the review we're saving: ${review}`);\r\n    dbPromise.then(db => {\r\n      const tx = db.transaction('reviews', 'readwrite');\r\n      const store = tx.objectStore('reviews');\r\n      if (status === 'online') {\r\n        store.add(review, review.id);\r\n      }\r\n      if (status === 'offline') {\r\n        review.offlineUpdate = true;\r\n        store.add(review, review.id);\r\n      }\r\n      return tx.complete;\r\n    });\r\n  }\r\n\r\n  static updateServer() {\r\n\r\n    // first check storeInfo db for any changes to favorites\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('storeInfo', 'readwrite');\r\n      const store = tx.objectStore('storeInfo');\r\n      return store.getAll('offlineUpdate');\r\n    })\r\n    // if there are changes, loop through and add them to the server and remove flag\r\n    .then(updates => {\r\n      updates.forEach(update => {\r\n        delete update.offlineUpdate;\r\n        fetch(`http://localhost:1337/restaurants/${update.id}/?is_favorite=${update.is_favorite}`, {\r\n            method: 'PUT'\r\n          })\r\n      })\r\n    })\r\n  \r\n    // then check reviews db for any new reviews to add\r\n    dbPromise.then(function (db) {\r\n      const tx = db.transaction('reviews', 'readwrite');\r\n      const store = tx.objectStore('reviews');\r\n      return store.getAll('offlineUpdate');\r\n    })\r\n    // if there are some, push them to the server and remove flag\r\n    .then(newReviews => {\r\n      newReviews.forEach(review => {\r\n        delete review.offlineUpdate;\r\n        fetch('http://localhost:1337/reviews/', {\r\n            method: 'POST',\r\n            body: JSON.stringify(review)\r\n          })\r\n      })\r\n    })\r\n  }\r\n\r\n} //end of class\r\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  if (navigator.onLine) {\r\n    DBHelper.updateServer();\r\n  }\r\n  initMap(); \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n    addMarkersToMap();\r\n  });\r\n};  \r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const fav = document.createElement('button');\r\n  fav.className = ('favButton');\r\n  fav.setAttribute('aria-label', `Toggle this restaurant's favorite status`);\r\n  const favOn = document.createElement('img'); \r\n  favOn.src = `./img/icons/fav_on.svg`;\r\n  favOn.className = 'favorite on';\r\n  favOn.alt = 'Favorite restaurant toggle turned on';\r\n  const favOff = document.createElement('img');\r\n  favOff.src = `./img/icons/fav_off.svg`;\r\n  favOff.className = 'favorite off';\r\n  favOff.alt = 'Favorite restaurant toggle turned off';\r\n  if (restaurant.is_favorite == 'true') {\r\n    favOff.classList.add('hide');\r\n  }\r\n  if (restaurant.is_favorite == 'false') {\r\n  favOn.classList.add('hide');\r\n  } \r\n  fav.append(favOff, favOn);\r\n  li.append(fav);\r\n\r\n  const trigger = li.querySelector('.favButton');\r\n  \r\n  trigger.addEventListener('click', function(e) {\r\n    e.preventDefault();\r\n    DBHelper.toggleFav(trigger, restaurant.id);\r\n  })\r\n  \r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n\r\n"]}
const dbPromise=idb.open("restaurantReviewSite",7,function(e){switch(e.oldVersion){case 0:case 1:e.createObjectStore("storeInfo",{keypath:"id"});case 2:e.createObjectStore("reviews",{keypath:"id"});case 3:e.transaction.objectStore("reviews").createIndex("rest_ID","restaurant_id")}});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static fetchRestaurants(e){fetch(`${DBHelper.DATABASE_URL}restaurants`).then(e=>e.json()).then(function(t){if(t){const n=t;n.forEach(e=>{dbPromise.then(async t=>{const n=t.transaction("storeInfo","readwrite").objectStore("storeInfo");e.hasOwnProperty("offlineUpdate")||(e.offlineUpdate=!1),await n.get(e.id)||(console.log("store is not in db, adding now"),n.add(e,e.id))})}),e(null,n)}else{const n=`Request failed: ${t.status} - ${t.statusText}`;e(n,null)}}).catch(function(){console.log("Sorry, your internet doesn't seem to be working. Pulling cached data for you now!"),dbPromise.then(function(e){return e.transaction("storeInfo","readwrite").objectStore("storeInfo").getAll()}).then(function(t){e(null,t)})})}static fetchReviewsById(e,t){console.log("inside fetchReviewsById");const n=`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`;fetch(n).then(e=>e.json()).then(function(e){if(e){console.log("fetch worked - dealing with response now");const n=e;n.forEach(e=>{dbPromise.then(async t=>{const n=t.transaction("reviews","readwrite").objectStore("reviews");e.hasOwnProperty("offlineUpdate")||(e.offlineUpdate=!1),await n.get(e.id)||(console.log("new review found! adding to cache"),n.add(e,e.id))})}),t(null,n)}else{console.log("fetch worked, but there was not any data");const n=`Request failed: ${e.status} - ${e.statusText}`;t(n,null)}}).catch(function(){console.log("inside the catch function of fetchReviewsById"),dbPromise.then(function(t){return t.transaction("reviews","readwrite").objectStore("reviews").index("rest_ID").getAll(parseInt(e,10))}).then(function(e){t(null,e)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`./img/optimized/${e.photograph}-optimized.jpg`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}static favStatus(e,t){fetch(`http://localhost:1337/restaurants/${t}/?is_favorite=${e}`,{method:"PUT"}).then(()=>{dbPromise.then(async n=>{const r=n.transaction("storeInfo","readwrite"),a=r.objectStore("storeInfo"),o=await a.get(t);return o.is_favorite=e,a.put(o,t),console.log("favorite status is marked!"),r.complete})}).catch(()=>{dbPromise.then(async n=>{const r=n.transaction("storeInfo","readwrite"),a=r.objectStore("storeInfo"),o=await a.get(t);return o.is_favorite=e,o.offlineUpdate=!0,a.put(o,t),console.log("favorite status is marked! will be updated on server when reconnected."),r.complete})})}static toggleFav(e,t){const n=e.querySelector(".on"),r=e.querySelector(".off");n.classList.contains("hide")?(DBHelper.favStatus("true",t),n.classList.toggle("hide"),r.classList.toggle("hide")):r.classList.contains("hide")&&(DBHelper.favStatus("false",t),n.classList.toggle("hide"),r.classList.toggle("hide"))}static stashReview(e,t){console.log(`review to stash: ${t.value}`),"offline"===e&&(t.offlineUpdate=!0),dbPromise.then(e=>{const n=e.transaction("reviews","readwrite");n.objectStore("reviews").add(t);return n.complete})}static updateServer(){dbPromise.then(function(e){return e.transaction("storeInfo","readwrite").objectStore("storeInfo").openCursor()}).then(function e(t){if(t)return t.value.offlineUpdate&&(fetch(`http://localhost:1337/restaurants/${t.value.id}/?is_favorite=${t.value.is_favorite}`,{method:"PUT"}),dbPromise.then(async e=>{const n=e.transaction("storeInfo","readwrite").objectStore("storeInfo"),r=await n.get(t.value.id);r.offlineUpdate=!1,n.put(r,r.id)})),t.continue().then(e)}),dbPromise.then(function(e){return e.transaction("reviews","readwrite").objectStore("reviews").openCursor()}).then(function e(t){if(t)return t.value.offlineUpdate&&(fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(review)}),dbPromise.then(async e=>{const n=e.transaction("reviews","readwrite").objectStore("reviews"),r=await n.get(t.value.id);r.offlineUpdate=!1,n.put(r,r.id)})),t.continue().then(e)})}}let restaurant,reviews;var newMap;document.addEventListener("DOMContentLoaded",e=>{navigator.onLine&&DBHelper.updateServer(),initMap()}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?(DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}),DBHelper.fetchReviewsById(t,(e,t)=>{if(self.reviews=t,!t)return console.error(e),void console.log("no reviews found from fetch");fillReviewsHTML(t)})):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.alt=`A photo showcasing the atmosphere of ${e.name}`;const n=document.getElementById("restaurant-cuisine");n.innerHTML=e.cuisine_type,n.setAttribute("aria-label",`${e.cuisine_type} restaurant`);const r=document.createElement("img");r.src="./img/icons/fav_on.svg",r.className="favorite on",r.alt="Favorite restaurant toggle turned on";const a=document.createElement("img");a.src="./img/icons/fav_off.svg",a.className="favorite off",a.alt="Favorite restaurant toggle turned off","false"==e.is_favorite?r.classList.add("hide"):"true"==e.is_favorite&&a.classList.add("hide");const o=document.getElementById("fav");o.setAttribute("aria-label","Toggle this restaurant's favorite status"),o.append(r,a),o.addEventListener("click",function(t){t.preventDefault(),DBHelper.toggleFav(o,e.id)}),e.operating_hours&&fillRestaurantHoursHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const o=document.createElement("td");o.innerHTML=e[n],r.appendChild(o),t.appendChild(r)}}),fillReviewsHTML=((e=self.reviews)=>{console.log("inside fillReviewsHTML function");const t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),t.setAttribute("aria-label","Reviews"),!e||0==Object.keys(e).length){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r);const a=formFunction(e[0].restaurant_id);t.appendChild(a)}),createReviewHTML=(e=>{const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=`Rating: ${e.rating}`,t.appendChild(r);const a=document.createElement("p");return a.innerHTML=e.comments,t.appendChild(a),t}),formFunction=(e=>{const t=document.getElementById("addReview"),n=document.createElement("h4");n.innerHTML="Add Your Own Review!",t.appendChild(n);const r=document.createElement("form");r.id="addReviewForm";const a=document.createElement("div");a.className="formDivider";const o=document.createElement("label");o.htmlFor="name",o.innerHTML="Your Name:";const s=document.createElement("input");s.type="text",s.name="user_name",s.id="name",a.appendChild(o),a.appendChild(s),r.appendChild(a);const i=document.createElement("div");i.className="formDivider";const l=document.createElement("label");l.htmlFor="rating",l.innerHTML="Rating: <br> (1 low, 5 high)";const c=document.createElement("input");c.type="number",c.name="user_rating",c.id="rating",i.appendChild(l),i.appendChild(c),r.appendChild(i);const d=document.createElement("div");d.className="formDivider";const u=document.createElement("label");u.htmlFor="uReview",u.innerHTML="Comments:";const f=document.createElement("textarea");f.name="user_review",f.id="uReview",f.placeholder="How was this place?",d.appendChild(u),d.appendChild(f),r.appendChild(d);const m=document.createElement("button");return m.type="submit",m.id="submitReview",m.innerHTML="Post Review",r.appendChild(m),t.appendChild(r),r.addEventListener("submit",function(n){n.preventDefault(),newReview(e,t,r)}),t}),newReview=((e,t,n)=>{const r={restaurant_id:e,name:n.user_name.value,rating:parseInt(n.user_rating.value,10),comments:n.user_review.value};fetch("http://localhost:1337/reviews/",{method:"POST",body:JSON.stringify(r)}).then(e=>e.json()).then(e=>{console.log("Success! Your review has been received. Response: ",e),DBHelper.stashReview("online",e),updateFormDiv(t)}).catch(e=>{console.error("Sorry, fetch failed! Storing review offline. Error code: ",e),DBHelper.stashReview("offline",r),updateFormDiv(t)})}),updateFormDiv=(e=>{e.innerHTML=`\n    <p> Thanks for adding your review! Reload the page to see your review live! </p>\n    <button class='reloadBtn'><a href=" ${window.location.href} "> Reload now? </a></button>\n  `}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=restaurant.js.map

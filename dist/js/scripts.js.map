{"version":3,"sources":["dbhelper.js","idb-test.js","main.js","restaurant_info.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","response","json","error","status","statusText","id","fetchRestaurants","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap","dbPromise","idb","open","upgradeDb","createObjectStore","put","db","transaction","objectStore","get","val","console","log","tx","complete","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","address","more","setAttribute","href","mapMarkerForRestaurant","on","window","location","options","push","fetchRestaurantFromURL","fillBreadcrumb","getParameterByName","fetchRestaurantById","fillRestaurantHTML","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","reviews","container","noReviews","review","createReviewHTML","date","rating","comments","breadcrumb","replace","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"scripts.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n    .then(response => response.json())\r\n    .then(function(response) {\r\n      if (response) {\r\n        const restaurants = response;\r\n        callback(null, restaurants);\r\n      } else {\r\n        const error = (`Request failed: ${response.status} - ${response.statusText}`);\r\n        callback(error, null);\r\n      }\r\n    })\r\n    }\r\n\r\n/*\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n*/\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`./img/optimized/${restaurant.photograph}-optimized.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n","\nvar dbPromise = idb.open('test-db', 1, function (upgradeDb) {\n    var keyValStore = upgradeDb.createObjectStore('keyval');\n    keyValStore.put(\"world\", \"hello\");\n});\n\n// read \"hello\" in \"keyval\"\ndbPromise.then(function (db) {\n    var tx = db.transaction('keyval');\n    var keyValStore = tx.objectStore('keyval');\n    return keyValStore.get('hello');\n}).then(function (val) {\n    console.log('The value of \"hello\" is:', val);\n});\n\n// set \"foo\" to be \"bar\" in \"keyval\"\ndbPromise.then(function (db) {\n    var tx = db.transaction('keyval', 'readwrite');\n    var keyValStore = tx.objectStore('keyval');\n    keyValStore.put('bar', 'foo');\n    return tx.complete;\n}).then(function () {\n    console.log('Added foo:bar to keyval');\n});\n\n\n","let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View details for ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */","let restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoibGluZGFrdDE2IiwiYSI6ImNqaW1sY3Z4bjAxa2EzcHBmaTZ4aTE2dzQifQ.cOXPk5Jme5zrFsUP3KEgLw',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/* window.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n} */\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  image.className = 'restaurant-img'\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `A photo showcasing the atmosphere of ${restaurant.name}`;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n  cuisine.setAttribute('aria-label', `${restaurant.cuisine_type} restaurant`);\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n  container.setAttribute('aria-label', 'Reviews');\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  li.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  li.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}